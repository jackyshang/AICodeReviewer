"""Formats code review output in markdown and terminal-friendly formats."""

import re
from datetime import datetime
from typing import Any, Dict, List, Optional

from rich.console import Console
from rich.markdown import Markdown
from rich.panel import Panel
from rich.syntax import Syntax
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table
from rich.text import Text


class ReviewFormatter:
    """Formats code review results for display."""
    
    def __init__(self):
        """Initialize the formatter."""
        self.console = Console()
        
    def format_review_markdown(self, review_data: Dict[str, Any], output_file: Optional[str] = None, show_all: bool = False) -> str:
        """Format review results as markdown.
        
        Args:
            review_data: Dictionary containing review results
            output_file: Optional file path to save the markdown
            
        Returns:
            Formatted markdown string
        """
        # Extract data
        review_text = review_data.get('review_content', '')
        nav_history = review_data.get('navigation_history', [])
        nav_summary = review_data.get('navigation_summary', {})
        repo_info = review_data.get('repo_info', {})
        changed_files = review_data.get('changed_files', {})
        
        # Build markdown
        lines = [
            f"# 🔍 Code Review Report",
            f"",
            f"**Date**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  ",
            f"**Repository**: {repo_info.get('repo_path', 'Unknown')}  ",
            f"**Branch**: {repo_info.get('current_branch', 'Unknown')}  ",
            f"**Provider**: Gemini 2.5 Pro Preview (AI Navigation Mode)  ",
            f"",
            f"## 📊 Summary",
            f"",
            f"- **Changed Files**: {sum(len(files) for files in changed_files.values())}",
            f"- **Files Explored**: {nav_summary.get('files_cached', 0)}",
            f"- **Navigation Steps**: {len(nav_history)}",
            f"- **Estimated Tokens**: {nav_summary.get('total_tokens_estimate', 0):,}",
            f"",
            f"## 📝 Changed Files",
            f""
        ]
        
        # Add changed files
        for status, files in changed_files.items():
            if files:
                lines.append(f"### {status.capitalize()}")
                for file in files:
                    lines.append(f"- `{file}`")
                lines.append("")
        
        # Add navigation path
        if nav_history:
            lines.extend([
                "## 🧭 AI Navigation Path",
                "",
                "The AI explored the following files and symbols:",
                ""
            ])
            
            for i, step in enumerate(nav_history, 1):
                func_name = step['function']
                args = step['args']
                
                if func_name == 'read_file':
                    lines.append(f"{i}. 📄 Read file: `{args.get('filepath', 'unknown')}`")
                elif func_name == 'search_symbol':
                    lines.append(f"{i}. 🔍 Searched for symbol: `{args.get('symbol_name', 'unknown')}`")
                elif func_name == 'find_usages':
                    lines.append(f"{i}. 📍 Found usages of: `{args.get('symbol_name', 'unknown')}`")
                elif func_name == 'get_imports':
                    lines.append(f"{i}. 📦 Got imports from: `{args.get('filepath', 'unknown')}`")
                elif func_name == 'search_text':
                    lines.append(f"{i}. 🔎 Searched for pattern: `{args.get('pattern', 'unknown')}`")
            
            lines.append("")
        
        # Add review content
        lines.extend([
            "## 📋 Review Results",
            "",
            review_text,
            "",
            "## 📊 Efficiency Report",
            ""
        ])
        
        # Add efficiency metrics
        total_files = nav_summary.get('index_stats', {}).get('total_files', 0)
        files_read = nav_summary.get('files_cached', 0)
        efficiency = (1 - (files_read / total_files)) * 100 if total_files > 0 else 0
        
        lines.extend([
            f"- **Total Files in Repository**: {total_files}",
            f"- **Files Actually Read**: {files_read} ({files_read/total_files*100:.1f}%)" if total_files > 0 else f"- **Files Actually Read**: {files_read}",
            f"- **Efficiency Gain**: {efficiency:.1f}% fewer files read",
            f"- **Estimated Token Usage**: {nav_summary.get('total_tokens_estimate', 0):,}",
            f"",
            f"---",
            f"*Generated by LLM Review Tool - AI-Powered Code Review with Intelligent Navigation*"
        ])
        
        markdown_content = '\n'.join(lines)
        
        # Save to file if requested
        if output_file:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
        
        return markdown_content
    
    def display_review_terminal(self, review_data: Dict[str, Any], verbose: bool = False, human_format: bool = False, show_all: bool = False):
        """Display review results in the terminal with rich formatting.
        
        Args:
            review_data: Dictionary containing review results
            verbose: Whether to show detailed information
            human_format: Whether to use human-readable format with colors (default: compact for AI)
            show_all: Whether to show all issues including suggestions (default: critical only)
        """
        # For compact AI format (default), just print the review text directly
        if not human_format:
            review_text = review_data.get('review_content', '')
            if review_text:
                # Just print the raw text without any formatting
                print(review_text)
            return
        
        # Human-readable format with all the rich formatting
        if verbose:
            # Header
            self.console.print(Panel.fit(
                "[bold cyan]🔍 Code Review Results[/bold cyan]",
                border_style="cyan"
            ))
            
            # Repository info
            repo_info = review_data.get('repo_info', {})
            info_table = Table(show_header=False, box=None, padding=(0, 1))
            info_table.add_row("Repository:", f"[yellow]{repo_info.get('repo_path', 'Unknown')}[/yellow]")
            info_table.add_row("Branch:", f"[green]{repo_info.get('current_branch', 'Unknown')}[/green]")
            info_table.add_row("Provider:", "[blue]Gemini 2.5 Pro Preview[/blue] (AI Navigation)")
            self.console.print(info_table)
            self.console.print()
            
            # Changed files summary
            changed_files = review_data.get('changed_files', {})
            total_changed = sum(len(files) for files in changed_files.values())
            
            if total_changed > 0:
                self.console.print("[bold]📝 Changed Files:[/bold]")
                for status, files in changed_files.items():
                    if files:
                        status_color = {
                            'modified': 'yellow',
                            'added': 'green',
                            'deleted': 'red',
                            'untracked': 'blue'
                        }.get(status, 'white')
                        
                        self.console.print(f"\n  [{status_color}]{status.capitalize()}:[/{status_color}]")
                        for file in files[:10]:  # Limit display
                            self.console.print(f"    • {file}")
                        if len(files) > 10:
                            self.console.print(f"    ... and {len(files) - 10} more")
                self.console.print()
            
            # Navigation summary
            nav_history = review_data.get('navigation_history', [])
            nav_summary = review_data.get('navigation_summary', {})
            
            if nav_history:
                self.console.print("[bold]🧭 Navigation Summary:[/bold]")
                nav_table = Table(show_header=True, header_style="bold magenta")
                nav_table.add_column("Step", style="cyan", width=4)
                nav_table.add_column("Action", style="green")
                nav_table.add_column("Target", style="yellow")
                
                for i, step in enumerate(nav_history[:10], 1):
                    action = step['function'].replace('_', ' ').title()
                    target = ''
                    
                    if 'filepath' in step['args']:
                        target = step['args']['filepath']
                    elif 'symbol_name' in step['args']:
                        target = step['args']['symbol_name']
                    elif 'pattern' in step['args']:
                        target = step['args']['pattern']
                        
                    nav_table.add_row(str(i), action, target)
                
                if len(nav_history) > 10:
                    nav_table.add_row("...", f"... and {len(nav_history) - 10} more steps", "")
                
                self.console.print(nav_table)
                self.console.print()
            
            # Review header
            self.console.print("[bold]📋 Review Results:[/bold]")
            self.console.print()
        
        # Review content - always show this
        review_text = review_data.get('review_content', '')
        if review_text:
            # Parse and format the review text
            self._format_review_content(review_text)
            self.console.print()
        
        if verbose:
            # Efficiency report only in verbose mode
            nav_summary = review_data.get('navigation_summary', {})
            self.console.print("[bold]💰 Efficiency Report:[/bold]")
            efficiency_table = Table(show_header=False, box=None)
            
            total_files = nav_summary.get('index_stats', {}).get('total_files', 0)
            files_read = nav_summary.get('files_cached', 0)
            tokens_used = nav_summary.get('total_tokens_estimate', 0)
            
            efficiency_table.add_row("Files in repository:", f"{total_files:,}")
            efficiency_table.add_row("Files explored:", f"{files_read} ({files_read/total_files*100:.1f}%)" if total_files > 0 else f"{files_read}")
            efficiency_table.add_row("Tokens used (est.):", f"{tokens_used:,}")
            
            # Add token breakdown if available
            if 'token_details' in review_data:
                token_details = review_data['token_details']
                efficiency_table.add_row("", "")  # Empty row for spacing
                efficiency_table.add_row("[dim]Token Breakdown:[/dim]", "")
                efficiency_table.add_row("  Input tokens:", f"{token_details.get('input_tokens', 0):,}")
                efficiency_table.add_row("  Output tokens:", f"{token_details.get('output_tokens', 0):,}")
                efficiency_table.add_row("  Total tokens:", f"{token_details.get('total_tokens', 0):,}")
            
            self.console.print(efficiency_table)
    
    def _format_review_content(self, review_text: str):
        """Format and display review content with rich formatting.
        
        Args:
            review_text: Raw review text from AI
        """
        # Custom parsing for better visual display
        lines = review_text.split('\n')
        current_section = None
        in_code_block = False
        code_lines = []
        
        for line in lines:
            # Handle code blocks
            if line.strip().startswith('```'):
                if in_code_block:
                    # End of code block - display it
                    if code_lines:
                        code_lang = code_lines[0] if code_lines[0] else 'python'
                        code_content = '\n'.join(code_lines[1:]) if len(code_lines) > 1 else ''
                        syntax = Syntax(code_content, code_lang, theme="monokai", line_numbers=False)
                        self.console.print(Panel(syntax, border_style="dim", padding=(1, 2)))
                    code_lines = []
                    in_code_block = False
                else:
                    # Start of code block
                    in_code_block = True
                    code_lang = line.strip('`').strip() or 'python'
                    code_lines = [code_lang]
                continue
                
            if in_code_block:
                code_lines.append(line)
                continue
                
            # Handle headers with severity
            if line.startswith('###'):
                header_text = line.strip('#').strip()
                if '🚨' in line or 'CRITICAL' in line:
                    current_section = 'critical'
                    self.console.print()
                    self.console.print(Panel(
                        f"[bold white on red] 🚨 {header_text.replace('🚨', '').strip()} [/bold white on red]",
                        border_style="red",
                        padding=(0, 1)
                    ))
                    self.console.print()
                elif '💡' in line or 'SUGGESTION' in line:
                    current_section = 'suggestion'
                    self.console.print()
                    self.console.print(Panel(
                        f"[bold black on yellow] 💡 {header_text.replace('💡', '').strip()} [/bold black on yellow]",
                        border_style="yellow",
                        padding=(0, 1)
                    ))
                    self.console.print()
                else:
                    current_section = None
                    self.console.print()
                    self.console.print(f"[bold cyan]{line}[/bold cyan]")
                    self.console.print()
            elif line.startswith('##'):
                self.console.print()
                self.console.print(f"[bold bright_cyan]{line}[/bold bright_cyan]")
                self.console.print("─" * 40, style="dim")
            elif line.startswith('#'):
                self.console.print()
                self.console.print(f"[bold bright_white]{line}[/bold bright_white]")
                self.console.print()
            # Handle numbered items
            elif re.match(r'^#### \d+\.', line):
                item_text = line.replace('####', '').strip()
                if current_section == 'critical':
                    # Extract file and issue
                    if '**' in item_text:
                        parts = item_text.split('**')
                        number = parts[0].strip()
                        file_issue = parts[1] if len(parts) > 1 else ''
                        rest = parts[2] if len(parts) > 2 else ''
                        self.console.print(f"[bold red]{number}[/bold red][bold white]{file_issue}[/bold white]{rest}")
                    else:
                        self.console.print(f"[bold red]{item_text}[/bold red]")
                else:
                    self.console.print(f"[bold yellow]{item_text}[/bold yellow]")
            # Handle bold text
            elif '**' in line:
                # Parse bold sections
                parts = re.split(r'\*\*', line)
                formatted_line = ""
                for i, part in enumerate(parts):
                    if i % 2 == 0:
                        formatted_line += part
                    else:
                        if current_section == 'critical':
                            formatted_line += f"[bold bright_red]{part}[/bold bright_red]"
                        elif current_section == 'suggestion':
                            formatted_line += f"[bold bright_yellow]{part}[/bold bright_yellow]"
                        else:
                            formatted_line += f"[bold]{part}[/bold]"
                self.console.print(formatted_line)
            # Handle bullet points
            elif line.strip().startswith('-'):
                bullet_text = line.strip()
                if current_section == 'critical':
                    self.console.print(f"  [red]•[/red] {bullet_text[1:].strip()}")
                elif current_section == 'suggestion':
                    self.console.print(f"  [yellow]•[/yellow] {bullet_text[1:].strip()}")
                else:
                    self.console.print(f"  [dim]•[/dim] {bullet_text[1:].strip()}")
            # Handle recommendation sections
            elif line.strip().startswith('**Recommendation:**'):
                self.console.print()
                self.console.print(f"  [italic dim]💭 Recommendation:[/italic dim]")
            # Regular text
            elif line.strip():
                if current_section == 'critical':
                    self.console.print(f"  [dim white]{line}[/dim white]")
                elif current_section == 'suggestion':
                    self.console.print(f"  [dim]{line}[/dim]")
                else:
                    self.console.print(f"  {line}")
    
    def show_progress(self, message: str):
        """Show a progress spinner.
        
        Args:
            message: Message to display with spinner
            
        Returns:
            Progress context manager
        """
        return Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            transient=True,
            console=self.console
        )
    
    def print_error(self, message: str):
        """Print an error message.
        
        Args:
            message: Error message to display
        """
        self.console.print(f"[bold red]❌ Error:[/bold red] {message}")
    
    def print_success(self, message: str):
        """Print a success message.
        
        Args:
            message: Success message to display
        """
        self.console.print(f"[bold green]✅ Success:[/bold green] {message}")
    
    def print_warning(self, message: str):
        """Print a warning message.
        
        Args:
            message: Warning message to display
        """
        self.console.print(f"[bold yellow]⚠️  Warning:[/bold yellow] {message}")
    
    def print_info(self, message: str):
        """Print an info message.
        
        Args:
            message: Info message to display
        """
        self.console.print(f"[bold blue]ℹ️  Info:[/bold blue] {message}")